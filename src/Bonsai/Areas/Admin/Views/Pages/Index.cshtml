@addTagHelper *, Bonsai
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model PagesListVM

@using Bonsai.Areas.Admin.ViewModels.Pages
@using Bonsai.Code.DomainModel.Media
@using Bonsai.Data.Models
@using Humanizer
@using Impworks.Utils.Format

@{
    ViewBag.Title = "Pages list";
    Layout = "~/Areas/Admin/Views/Layout.cshtml";

    var baseUrl = Url.Action("Index", "Pages", new { area = "Admin" });
}

<h1>Pages list</h1>

<div class="clearfix">
    <div class="float-left">
        <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" data-toggle="dropdown" title="Create new page">
                <span class="fa fa-plus-circle"></span>
                Create
            </button>
            <div class="dropdown-menu">
                @foreach (var elem in EnumHelper.GetEnumDescriptions<PageType>())
                {
                    <a href="@Url.Action("Create", "Pages", new {area = "Admin", type = elem.Key})" class="dropdown-item">@elem.Value</a>
                }
            </div>
        </div>
    </div>
    <div class="float-right">
        <form action="@baseUrl" method="GET" class="form-inline">
            @await Component.InvokeAsync("ListHiddenFilterComponent", new { request = Model.Request })
            @await Component.InvokeAsync("ListEnumFilterComponent", new
            {
                request = Model.Request,
                propName = nameof(PagesListRequestVM.Types)
            })
            <input type="text" class="form-control form-control-sm mr-sm-2" name="@nameof(PagesListRequestVM.SearchQuery)" value="@Model.Request.SearchQuery" placeholder="Title"/>
            <button class="btn btn-sm btn-outline-secondary" type="submit">Search</button>
        </form>
    </div>
</div>

@if(Model.Items.Any())
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th width="50%">@await Component.InvokeAsync("ListHeaderComponent", new { url = baseUrl, request = Model.Request, propName = nameof(PageScoredVM.Title), title = "Title" })</th>
                <th width="20%">@await Component.InvokeAsync("ListHeaderComponent", new { url = baseUrl, request = Model.Request, propName = nameof(PageScoredVM.CreationDate), title = "Created" })</th>
                <th width="20%">@await Component.InvokeAsync("ListHeaderComponent", new { url = baseUrl, request = Model.Request, propName = nameof(PageScoredVM.LastUpdateDate), title = "Changes" })</th>
                <th width="10%">@await Component.InvokeAsync("ListHeaderComponent", new { url = baseUrl, request = Model.Request, propName = nameof(PageScoredVM.CompletenessScore), title = "Rate" })</th>
                <th width="1px"></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in Model.Items)
            {
            <tr class="admin-row">
                <td>
                    <page-image image="@p.MainPhotoPath" type="@p.Type" size="@MediaSize.Small"></page-image>
                    <a href="@Url.Action("Update", "Pages", new {area = "Admin", id = p.Id})" title="Edit">
                        @p.Title
                    </a>
                </td>
                <td><span title="@p.CreationDate.LocalDateTime.ToString("G")">@p.CreationDate.Humanize()</span></td>
                <td><span title="@p.LastUpdateDate.LocalDateTime.ToString("G")">@p.LastUpdateDate.Humanize()</span></td>
                <td class="popover-wrapper">
                    <span class="popover-handle">@p.CompletenessScore%</span>
                    <div class="popover-contents">
                        <ul class="completeness-criterions list-unstyled">
                            @foreach (var crit in p.Criterions)
                            {
                            <li>
                                <span class="fa @(crit.IsFilled ? "fa-check-circle-o completeness-criterion-filled" : "fa-circle-o completeness-criterion-unfilled")"></span>
                                <span>@crit.Title</span>
                            </li>
                            }
                        </ul>
                    </div>
                </td>
                <td class="admin-row-actions">
                    <a href="@Url.Action("Remove", "Pages", new {area = "Admin", id = p.Id})">
                        <span class="fa fa-remove" title="Delete"></span>
                    </a>
                    <a href="@Url.Action("Index", "Changesets", new {area = "Admin", entityId = p.Id})">
                        <span class="fa fa-database" title="Changes History"></span>
                    </a>
                    <a href="@Url.Action("Index", "Relations", new {area = "Admin", entityId = p.Id})">
                        <span class="fa fa-retweet" title="relations"></span>
                    </a>
                    <a href="@Url.Action("Index", "Media", new {area = "Admin", entityId = p.Id})">
                        <span class="fa fa-picture-o" title="Media"></span>
                    </a>
                    <a href="@Url.Action("Description", "Page", new {area = "Front", key = p.Key})" target="_blank">
                        <span class="fa fa-external-link-square" title="View"></span>
                    </a>
                </td>
            </tr>
            }
        </tbody>
    </table>
}
else
{
    if(Model.Request.IsEmpty())
    {
        <div class="alert alert-info">
            Не добавлено ни одной страницы.
        </div>
    }
    else
    {
        <div class="alert alert-info">
            По запросу не найдено ни одной страницы.
        </div>
    }
}

<div class="clearfix">
    <div class="pull-right">
        @await Component.InvokeAsync("ListPaginatorComponent", new
        {
            url = baseUrl,
            request = Model.Request,
            pageCount = Model.PageCount
        })
    </div>
</div>